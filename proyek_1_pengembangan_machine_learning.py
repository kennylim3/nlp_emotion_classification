# -*- coding: utf-8 -*-
"""Proyek 1 Pengembangan Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hfa6jvSJa9aJWNecMn7j3JyrohkouVB9
"""

import pandas as pd
df = pd.read_csv('emotion.txt', names=['sentence', 'label'], sep=';')
df

emotion = pd.get_dummies(df.label)
df_baru = pd.concat([df, emotion], axis=1)
df_baru = df_baru.drop(columns='label')
df_baru

sentence = df_baru['sentence'].values
label = df_baru[['anger', 'fear', 'joy', 'love', 'sadness', 'surprise']].values

from sklearn.model_selection import train_test_split

kalimat_latih, kalimat_test, label_latih, label_test = train_test_split(sentence, label, test_size=0.2)

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

tokenizer = Tokenizer(num_words=10000, oov_token='x')
tokenizer.fit_on_texts(kalimat_latih)

sekuens_latih = tokenizer.texts_to_sequences(kalimat_latih)
sekuens_test = tokenizer.texts_to_sequences(kalimat_test)

padded_latih = pad_sequences(sekuens_latih, padding='post', maxlen=50, truncating='post')
padded_test = pad_sequences(sekuens_test, padding='post', maxlen=50, truncating='post')

import tensorflow as tf

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=10000, output_dim=16),
    tf.keras.layers.LSTM(32),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(6, activation='softmax')
])

model.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), metrics=['accuracy'])

class Callback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('val_accuracy')>=0.9):
      print("\nAkurasi telah mencapai 90%")
      self.model.stop_training = True
callbacks = Callback()

history = model.fit(padded_latih, label_latih, epochs=100, validation_data=(padded_test, label_test), verbose=2, callbacks=[callbacks])

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title("Model's Accuracy")
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='lower right')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title("Model's Loss")
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='lower left')
plt.show()